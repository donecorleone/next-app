{"version":3,"file":"hamo.modern.mjs","sources":["../src/hooks/use-click-outside-event.js","../src/hooks/use-is-client.js","../src/hooks/use-debug.js","../src/hooks/use-document-ready-state.js","../src/hooks/use-frame.js","../src/hooks/use-intersection-observer.js","../src/hooks/use-interval.js","../src/hooks/use-is-touch-device.js","../src/hooks/use-media-query.js","../src/hooks/use-resize-observer.js","../src/hooks/use-rect.js","../src/hooks/use-slots.js","../src/hooks/use-window-size.js"],"sourcesContent":["/**\n * useOutsideClickEvent - custom hook that listens for clicks outside of a component\n * @param {Object} ref - React ref for the element to listen for clicks outside of\n * @param {Function} callback - callback function to call when a click outside of the element is detected\n */\n\nimport { useCallback, useEffect } from 'react'\n\nexport function useOutsideClickEvent(ref, callback) {\n  const handleClickOutside = useCallback(\n    (event) => {\n      if (ref.current && !ref.current.contains(event.target)) {\n        callback()\n      }\n    },\n    [ref, callback]\n  )\n\n  useEffect(() => {\n    if (ref.current) {\n      document.addEventListener('mousedown', handleClickOutside)\n      return () => {\n        document.removeEventListener('mousedown', handleClickOutside)\n      }\n    }\n  }, [handleClickOutside, ref])\n}\n","// This component is used to check if the window object is present.\nimport { useEffect, useState } from 'react'\n\nexport function useIsClient() {\n  const [isClient, setClient] = useState(false)\n\n  useEffect(() => {\n    setClient(true)\n  }, [])\n\n  return isClient\n}\n","import { useMemo } from 'react'\nimport { useIsClient } from './use-is-client'\n\nexport function useDebug() {\n  const isClient = useIsClient()\n\n  const debug = useMemo(() => {\n    if (!isClient) return undefined\n\n    const location = window.location\n    const search = location.search\n    const href = location.href\n    const searchParams = new URLSearchParams(search)\n\n    const isDebug =\n      href.includes('#debug') || // localhost:3000/#debug\n      href.includes('/_debug') || // localhost:3000/_debug\n      searchParams.has('debug') || // localhost:3000/?debug\n      process.env.NODE_ENV === 'development' // localhost:3000\n\n    const isProduction =\n      href.includes('#production') || // localhost:3000/#production\n      searchParams.has('production') // localhost:3000/?production\n\n    return isDebug && !isProduction\n  }, [isClient])\n\n  return debug\n}\n","// useDocumentReadyState.js\n// This code is a custom hook that returns the current document.readyState\n// The useLayoutEffect hook is used to set the state of the document\n// The useEffect hook is used to set the state of the document to 'complete' when the document is ready\n\nimport { useEffect, useState } from 'react'\n\n/**\n * @name useDocumentReadyState\n * @description A React hook that listen to document.readyState.\n * @returns {string} document.readyState\n */\n\nexport function useDocumentReadyState() {\n  const [readyState, setReadyState] = useState()\n\n  useEffect(() => {\n    function onStateChange() {\n      setReadyState(document.readyState)\n    }\n\n    document.addEventListener('readystatechange', onStateChange, false)\n    onStateChange()\n\n    return () => document.removeEventListener('readystatechange', onStateChange, false)\n  }, [])\n\n  return readyState\n}\n","/**\n * Creates a requestAnimationFrame loop and manages the lifecycle of the callback.\n * @param {Function} callback - A function that is called every frame.\n * @param {Number} priority - A number that determines the order in which the callback is called.\n */\n\nimport Tempus from '@studio-freight/tempus'\nimport { useEffect } from 'react'\n\nexport function useFrame(callback, priority = 0) {\n  useEffect(() => {\n    if (callback) {\n      Tempus.add(callback, priority)\n\n      return () => Tempus.remove(callback)\n    }\n  }, [callback, priority])\n}\n","import { useCallback, useEffect, useRef, useState } from 'react'\n\n/**\n * @name useIntersectionObserver\n * @description A React hook that oberves element visibility using IntersectionObserver.\n * @param {HTMLElement} root\n * @param {string} rootMargin\n * @param {number} threshold\n * @param {boolean} once\n * @param {boolean} lazy\n * @param {function} callback\n * @param {array} deps\n * @returns {array} [setElement, entry]\n */\n\nexport function useIntersectionObserver(\n  { root = null, rootMargin = '0px', threshold = 0, once = false, lazy = false, callback = () => {} } = {},\n  deps = []\n) {\n  const entryRef = useRef({})\n  const [entry, setEntry] = useState({})\n  const [element, setElement] = useState()\n\n  useEffect(() => {\n    if (!element) return\n\n    const intersection = new IntersectionObserver(\n      ([entry]) => {\n        if (lazy) {\n          entryRef.current = entry\n        } else {\n          setEntry(entry)\n        }\n\n        callback(entry)\n\n        if (once && entry.isIntersecting) intersection.disconnect()\n      },\n      {\n        root,\n        rootMargin,\n        threshold,\n      }\n    )\n    intersection.observe(element)\n\n    return () => {\n      intersection.disconnect()\n    }\n  }, [element, root, rootMargin, threshold, lazy, once, ...deps])\n\n  const get = useCallback(() => entryRef.current, [])\n\n  return [setElement, lazy ? get : entry]\n}\n","/**\n * This function allows you to set an interval in a functional component\n * @param {function} callback - The callback function\n * @param {number} delay - The delay between each interval\n */\n\nimport { useEffect } from 'react'\n\nexport function useInterval(callback, delay = 1000, deps = []) {\n  useEffect(() => {\n    const interval = setInterval(callback, delay)\n    return () => clearInterval(interval)\n  }, [delay, ...deps])\n}\n","/*\n  This hook checks if the device has a touch screen. It checks for the touchstart event,\n  as well as the maxTouchPoints property on the navigator object. It also checks the\n  msMaxTouchPoints property, which is specific to Microsoft browsers.\n*/\n\nimport { useEffect, useState } from 'react'\n\n/**\n * @name useIsTouchDevice\n * @description A React hook that detects if the device supports touch.\n * @returns {boolean} Whether the device supports touch or not.\n */\n\nexport function useIsTouchDevice() {\n  const [isTouchDevice, setIsTouchDevice] = useState()\n\n  useEffect(() => {\n    function onResize() {\n      setIsTouchDevice('ontouchstart' in window || navigator.maxTouchPoints > 0 || navigator.msMaxTouchPoints > 0)\n    }\n\n    window.addEventListener('resize', onResize, false)\n    onResize()\n\n    return () => {\n      window.removeEventListener('resize', onResize, false)\n    }\n  }, [])\n\n  return isTouchDevice\n}\n","import { useEffect, useState } from 'react'\n\n/**\n * @name useMediaQuery\n * @description A React hook that detects whether a media query is true or false.\n * @param {string} queryString The media query to test against.\n * @returns {boolean} Whether the media query is true or false.\n */\n\nexport function useMediaQuery(queryString) {\n  const [isMatch, setIsMatch] = useState()\n\n  useEffect(() => {\n    const mediaQuery = window.matchMedia(queryString)\n\n    function onChange() {\n      setIsMatch(mediaQuery.matches)\n    }\n\n    mediaQuery.addEventListener('change', onChange, false)\n    onChange()\n\n    return () => mediaQuery.removeEventListener('change', onChange, false)\n  }, [queryString])\n\n  return isMatch\n}\n","import { useCallback, useEffect, useRef, useState } from 'react'\nimport { throttle } from 'throttle-debounce'\n\n/**\n * useResizeObserver - observe elements dimensions using ResizeObserver\n * @param {Boolean} lazy - should return a state or not\n * @param {Number} debounce - minimum delay between two ResizeObserver computations\n * @param {String} box - ResizeObserver parameter\n * @param {Function} callback - called on value change\n * @param {Array} deps - props that should trigger a new computation\n */\n\nexport function useResizeObserver(\n  { lazy = false, debounce = 1000, box = 'border-box', callback = () => {} } = {},\n  deps = []\n) {\n  const entryRef = useRef({})\n  const [entry, setEntry] = useState({})\n  const [element, setElement] = useState()\n\n  useEffect(() => {\n    if (!element) return\n\n    const onResize = throttle(debounce, ([entry]) => {\n      entryRef.current = entry\n\n      callback(entry)\n\n      if (!lazy) {\n        setEntry(entry)\n      }\n    })\n\n    const resizeObserver = new ResizeObserver(onResize)\n    resizeObserver.observe(element, { box })\n\n    return () => {\n      resizeObserver.disconnect()\n      onResize.cancel()\n    }\n  }, [element, lazy, debounce, box, ...deps])\n\n  const get = useCallback(() => entryRef.current, [])\n\n  return [setElement, lazy ? get : entry]\n}\n","import { useCallback, useEffect, useRef, useState } from 'react'\nimport { throttle } from 'throttle-debounce'\nimport { useResizeObserver } from './use-resize-observer'\n\n// offsetTop function returns the offsetTop value of a DOM element.\n// The offsetTop value is the distance between the top of the element\n// and the top of the viewport.\nexport function offsetTop(element, accumulator = 0) {\n  const top = accumulator + element.offsetTop\n  if (element.offsetParent) {\n    return offsetTop(element.offsetParent, top)\n  }\n  return top\n}\n\n// offsetLeft function returns the offsetLeft value of a DOM element.\n// The offsetLeft value is the distance between the left of the element\n// and the left of the viewport.\nexport function offsetLeft(element, accumulator = 0) {\n  const left = accumulator + element.offsetLeft\n  if (element.offsetParent) {\n    return offsetLeft(element.offsetParent, left)\n  }\n  return left\n}\n\n/**\n * useRect - observe elements BoundingRect\n * @param {boolean} ignoreTransform - should include transform in the returned rect or not\n * @param {boolean} lazy - should return a state or not\n * @param {number} debounce - minimum delay between two rect computations\n * @param {number} resizeDebounce - minimum delay between two ResizeObserver computations\n * @param {Function} callback - called on value change\n * @param {Array} deps - props that should trigger a new rect computation\n */\n\nexport function useRect(\n  { ignoreTransform = false, lazy = false, debounce = 1000, resizeDebounce = debounce, callback = () => {} } = {},\n  deps = []\n) {\n  const [element, setElement] = useState()\n  const [rect, setRect] = useState({})\n  const rectRef = useRef({})\n  const [setResizeObserverElement] = useResizeObserver(\n    {\n      lazy: true,\n      debounce: resizeDebounce,\n      callback: (entry) => {\n        // includes padding and border\n        const width = entry.borderBoxSize[0].inlineSize\n        const height = entry.borderBoxSize[0].blockSize\n\n        rectRef.current.width = width\n        rectRef.current.height = height\n\n        callback(rectRef.current)\n\n        if (!lazy) {\n          setRect((rect) => ({\n            ...rect,\n            width,\n            height,\n          }))\n        }\n      },\n    },\n    [lazy, resizeDebounce, ...deps]\n  )\n\n  // resize if body height changes\n  useEffect(() => {\n    if (!element) return\n\n    const onBodyResize = throttle(debounce, () => {\n      let top, left\n\n      if (ignoreTransform) {\n        top = offsetTop(element)\n        left = offsetLeft(element)\n      } else {\n        const rect = element.getBoundingClientRect()\n        top = rect.top + window.scrollY\n        left = rect.left + window.scrollX\n      }\n\n      rectRef.current.top = top\n      rectRef.current.left = left\n\n      callback(rectRef.current)\n\n      if (!lazy) {\n        setRect((rect) => ({\n          ...rect,\n          top,\n          left,\n        }))\n      }\n    })\n    const resizeObserver = new ResizeObserver(onBodyResize)\n    resizeObserver.observe(document.body)\n\n    return () => {\n      resizeObserver.disconnect()\n      onBodyResize.cancel()\n    }\n  }, [element, lazy, debounce, ignoreTransform, ...deps])\n\n  const getRect = useCallback(() => rectRef.current, [])\n\n  return [\n    (node) => {\n      setElement(node)\n      setResizeObserverElement(node)\n    },\n    lazy ? getRect : rect,\n  ]\n}\n","// This code is used to extract the contents of a component's children and return them as an array.\n// The code accepts two arguments, the names of the components that it should extract, and the children to extract from.\n// The code returns an array of the children of the components passed in the types argument.\n// based on:\n// https://medium.com/swlh/bring-vue-named-slots-to-react-87684188f18e\n\nimport { useMemo } from 'react'\n\nexport function useSlots(types = [], children = []) {\n  const _children = useMemo(() => children && [children].flat(), [children])\n  const _types = useMemo(() => types && [types].flat(), [types])\n  const slots = useMemo(() => {\n    if (!_children || !_types) {\n      return\n    }\n\n    const slots = _types.map((type) => _children.find((el) => el.type === type)?.props.children)\n\n    return types[0] ? slots : slots[0]\n  }, [_children, _types])\n\n  return slots\n}\n","import { useEffect, useState } from 'react'\n\n/**\n * @name useWindowSize\n * @description A React hook that listens to window size.\n * @returns {object} { width, height }\n */\n\nexport function useWindowSize() {\n  const [width, setWidth] = useState()\n  const [height, setHeight] = useState()\n\n  useEffect(() => {\n    function onWindowRezise() {\n      setWidth(Math.min(window.innerWidth, document.documentElement.clientWidth))\n      setHeight(Math.min(window.innerHeight, document.documentElement.clientHeight))\n    }\n\n    window.addEventListener('resize', onWindowRezise, false)\n\n    onWindowRezise()\n\n    return () => window.removeEventListener('resize', onWindowRezise, false)\n  }, [])\n\n  return { width, height }\n}\n"],"names":["useOutsideClickEvent","ref","callback","handleClickOutside","useCallback","event","current","contains","target","useEffect","document","addEventListener","removeEventListener","useIsClient","isClient","setClient","useState","useDebug","useMemo","location","window","href","searchParams","URLSearchParams","search","isDebug","includes","has","process","env","NODE_ENV","isProduction","useDocumentReadyState","readyState","setReadyState","onStateChange","useFrame","priority","Tempus","add","remove","useIntersectionObserver","root","rootMargin","threshold","once","lazy","deps","entryRef","useRef","entry","setEntry","element","setElement","intersection","IntersectionObserver","isIntersecting","disconnect","observe","get","useInterval","delay","interval","setInterval","clearInterval","useIsTouchDevice","isTouchDevice","setIsTouchDevice","onResize","navigator","maxTouchPoints","msMaxTouchPoints","useMediaQuery","queryString","isMatch","setIsMatch","mediaQuery","matchMedia","onChange","matches","useResizeObserver","debounce","box","throttle","resizeObserver","ResizeObserver","cancel","offsetTop","accumulator","top","offsetParent","offsetLeft","left","useRect","ignoreTransform","resizeDebounce","rect","setRect","rectRef","setResizeObserverElement","width","borderBoxSize","inlineSize","height","blockSize","_extends","onBodyResize","getBoundingClientRect","scrollY","scrollX","body","getRect","node","useSlots","types","children","_children","flat","_types","slots","map","type","_children$find","find","el","props","useWindowSize","setWidth","setHeight","onWindowRezise","Math","min","innerWidth","documentElement","clientWidth","innerHeight","clientHeight"],"mappings":"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"}